package entities;

import java.util.ArrayList;
import java.util.List;

import entities.enums.WorkerLevel;

public class Worker {
	private String name; 
	private WorkerLevel level; 
	private Double baseSalary;
	
	// agora vou botar as associacoes
	// worker tem um department (departamento) 
	// a outra associacao: um worker tem varios contracts
	
	private Department department; // a lista tem que ser instanciada ja na declaracao do atributo
	private List<HourContract> contracts = new ArrayList<>();
	// nome da lista contracts
	
	public Worker() {
		
	}
	
	// desmarque a LISTA dos construtores.
	public Worker(String name, WorkerLevel level, Double baseSalary, Department department) {
		this.name = name;
		this.level = level;
		this.baseSalary = baseSalary;
		this.department = department;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public WorkerLevel getLevel() {
		return level;
	}

	public void setLevel(WorkerLevel level) {
		this.level = level;
	}

	public Double getBaseSalary() {
		return baseSalary;
	}

	public void setBaseSalary(Double baseSalary) {
		this.baseSalary = baseSalary;
	}

	public Department getDepartment() {
		return department;
	}

	public void setDepartment(Department department) {
		this.department = department;
	}

	public List<HourContract> getContracts() {
		return contracts;
	}

	public void setContracts(List<HourContract> contracts) {
		this.contracts = contracts;
	}
	
	// quando voce tem uma composicao com muitos (Lista)
	// voce nao inclui no construtor, vc simplesmente inicia sua lista vazia 
	
	// o que esse metodo faz? vai pegar a listinha de contratos
	// e adicionar o contrato q veio como argumento
	public void addContract(HourContract contract) {
		contracts.add(contract);
	}
}
